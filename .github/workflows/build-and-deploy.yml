name: Build and Deploy

on:
  push:
    branches: [ "master" ]
  pull_request:

permissions:
  contents: read

env:
  cache-name: build-assets-cache

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup node
      uses: actions/setup-node@v3
      with:
        node-version: 18.17.1
        cache: 'npm'

    - run: npm ci
    - run: npm run lint
    - run: npm run test --ci
    - run: npm run semantic-release
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
    - run: npm run build

    - name: Cache assets
      uses: actions/cache@v3
      with:
        path: |
          build
          terraform
        key: ${{ env.cache-name }}-${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
    - name: Restore assets
      uses: actions/cache@v3
      with:
        path: |
          build
          terraform
        key: ${{ env.cache-name }}-${{ github.sha }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.7

    - name: Terraform Init
      run: terraform init
      working-directory: terraform

    - name: Terraform Format
      run: terraform fmt -check
      working-directory: terraform

    - name: Terraform Plan
      run: terraform plan -out tfapply
      working-directory: terraform

    - name: Terraform Apply
      run: terraform apply -auto-approve tfapply
      working-directory: terraform
